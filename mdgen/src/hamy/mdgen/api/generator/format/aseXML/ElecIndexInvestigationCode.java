//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.18 at 10:36:34 AM AEDT 
//


package hamy.mdgen.api.generator.format.aseXML;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ElecIndexInvestigationCode.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ElecIndexInvestigationCode">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Confirm Reading For Vacant Site"/>
 *     &lt;enumeration value="Confirm Zero Consumption"/>
 *     &lt;enumeration value="Incomplete Data"/>
 *     &lt;enumeration value="Invalid MDFF Data"/>
 *     &lt;enumeration value="Invalid Standing Data"/>
 *     &lt;enumeration value="Missing Datastream"/>
 *     &lt;enumeration value="Require Actual Reading or Substitute"/>
 *     &lt;enumeration value="Require Final Substitute"/>
 *     &lt;enumeration value="Scheduled Reading Required"/>
 *     &lt;enumeration value="Service Order Reading Required"/>
 *     &lt;enumeration value="Verify High Reading"/>
 *     &lt;enumeration value="Verify Low Reading"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="Verify/Missing Register"/>
 *     &lt;enumeration value="Require Estimate Data"/>
 *     &lt;enumeration value="Meter Churn"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ElecIndexInvestigationCode")
@XmlEnum
public enum ElecIndexInvestigationCode {

    @XmlEnumValue("Confirm Reading For Vacant Site")
    CONFIRM_READING_FOR_VACANT_SITE("Confirm Reading For Vacant Site"),
    @XmlEnumValue("Confirm Zero Consumption")
    CONFIRM_ZERO_CONSUMPTION("Confirm Zero Consumption"),
    @XmlEnumValue("Incomplete Data")
    INCOMPLETE_DATA("Incomplete Data"),
    @XmlEnumValue("Invalid MDFF Data")
    INVALID_MDFF_DATA("Invalid MDFF Data"),
    @XmlEnumValue("Invalid Standing Data")
    INVALID_STANDING_DATA("Invalid Standing Data"),
    @XmlEnumValue("Missing Datastream")
    MISSING_DATASTREAM("Missing Datastream"),
    @XmlEnumValue("Require Actual Reading or Substitute")
    REQUIRE_ACTUAL_READING_OR_SUBSTITUTE("Require Actual Reading or Substitute"),
    @XmlEnumValue("Require Final Substitute")
    REQUIRE_FINAL_SUBSTITUTE("Require Final Substitute"),
    @XmlEnumValue("Scheduled Reading Required")
    SCHEDULED_READING_REQUIRED("Scheduled Reading Required"),
    @XmlEnumValue("Service Order Reading Required")
    SERVICE_ORDER_READING_REQUIRED("Service Order Reading Required"),
    @XmlEnumValue("Verify High Reading")
    VERIFY_HIGH_READING("Verify High Reading"),
    @XmlEnumValue("Verify Low Reading")
    VERIFY_LOW_READING("Verify Low Reading"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("Verify/Missing Register")
    VERIFY_MISSING_REGISTER("Verify/Missing Register"),
    @XmlEnumValue("Require Estimate Data")
    REQUIRE_ESTIMATE_DATA("Require Estimate Data"),
    @XmlEnumValue("Meter Churn")
    METER_CHURN("Meter Churn");
    private final String value;

    ElecIndexInvestigationCode(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ElecIndexInvestigationCode fromValue(String v) {
        for (ElecIndexInvestigationCode c: ElecIndexInvestigationCode.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
