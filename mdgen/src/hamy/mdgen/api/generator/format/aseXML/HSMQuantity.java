//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.18 at 10:36:34 AM AEDT 
//


package hamy.mdgen.api.generator.format.aseXML;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for HSMQuantity.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="HSMQuantity">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Voltage Angle Blue"/>
 *     &lt;enumeration value="Voltage Angle Positive Sequence"/>
 *     &lt;enumeration value="Voltage Angle Red"/>
 *     &lt;enumeration value="Voltage Angle White"/>
 *     &lt;enumeration value="Frequency"/>
 *     &lt;enumeration value="Power Blue"/>
 *     &lt;enumeration value="Power Red"/>
 *     &lt;enumeration value="Power Three Phase"/>
 *     &lt;enumeration value="Power White"/>
 *     &lt;enumeration value="Reactive Power Blue"/>
 *     &lt;enumeration value="Reactive Power Red"/>
 *     &lt;enumeration value="Reactive Power Three Phase"/>
 *     &lt;enumeration value="Reactive Power White"/>
 *     &lt;enumeration value="Voltage Blue"/>
 *     &lt;enumeration value="Voltage Positive Sequence"/>
 *     &lt;enumeration value="Voltage Red"/>
 *     &lt;enumeration value="Voltage White"/>
 *     &lt;enumeration value="Current Red"/>
 *     &lt;enumeration value="Current White"/>
 *     &lt;enumeration value="Current Blue"/>
 *     &lt;enumeration value="Current Angle Red"/>
 *     &lt;enumeration value="Current Angle Blue"/>
 *     &lt;enumeration value="Current Angle White"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "HSMQuantity")
@XmlEnum
public enum HSMQuantity {

    @XmlEnumValue("Voltage Angle Blue")
    VOLTAGE_ANGLE_BLUE("Voltage Angle Blue"),
    @XmlEnumValue("Voltage Angle Positive Sequence")
    VOLTAGE_ANGLE_POSITIVE_SEQUENCE("Voltage Angle Positive Sequence"),
    @XmlEnumValue("Voltage Angle Red")
    VOLTAGE_ANGLE_RED("Voltage Angle Red"),
    @XmlEnumValue("Voltage Angle White")
    VOLTAGE_ANGLE_WHITE("Voltage Angle White"),
    @XmlEnumValue("Frequency")
    FREQUENCY("Frequency"),
    @XmlEnumValue("Power Blue")
    POWER_BLUE("Power Blue"),
    @XmlEnumValue("Power Red")
    POWER_RED("Power Red"),
    @XmlEnumValue("Power Three Phase")
    POWER_THREE_PHASE("Power Three Phase"),
    @XmlEnumValue("Power White")
    POWER_WHITE("Power White"),
    @XmlEnumValue("Reactive Power Blue")
    REACTIVE_POWER_BLUE("Reactive Power Blue"),
    @XmlEnumValue("Reactive Power Red")
    REACTIVE_POWER_RED("Reactive Power Red"),
    @XmlEnumValue("Reactive Power Three Phase")
    REACTIVE_POWER_THREE_PHASE("Reactive Power Three Phase"),
    @XmlEnumValue("Reactive Power White")
    REACTIVE_POWER_WHITE("Reactive Power White"),
    @XmlEnumValue("Voltage Blue")
    VOLTAGE_BLUE("Voltage Blue"),
    @XmlEnumValue("Voltage Positive Sequence")
    VOLTAGE_POSITIVE_SEQUENCE("Voltage Positive Sequence"),
    @XmlEnumValue("Voltage Red")
    VOLTAGE_RED("Voltage Red"),
    @XmlEnumValue("Voltage White")
    VOLTAGE_WHITE("Voltage White"),
    @XmlEnumValue("Current Red")
    CURRENT_RED("Current Red"),
    @XmlEnumValue("Current White")
    CURRENT_WHITE("Current White"),
    @XmlEnumValue("Current Blue")
    CURRENT_BLUE("Current Blue"),
    @XmlEnumValue("Current Angle Red")
    CURRENT_ANGLE_RED("Current Angle Red"),
    @XmlEnumValue("Current Angle Blue")
    CURRENT_ANGLE_BLUE("Current Angle Blue"),
    @XmlEnumValue("Current Angle White")
    CURRENT_ANGLE_WHITE("Current Angle White");
    private final String value;

    HSMQuantity(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static HSMQuantity fromValue(String v) {
        for (HSMQuantity c: HSMQuantity.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
